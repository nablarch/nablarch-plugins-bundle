'use strict';
require('sugar');

var fs      = require('fs')
  , path    = require('path');

Versions.prototype = {
   info  : {}
 , diff  : Versions_diff
 , list  : Versions_list
 , root  : null
}

/**
 * プラグインのバージョン情報。
 * 
 * @param pluginDir プラグイン群の格納ディレクトリ。
 */
function Versions(pluginsDir) {
  this.constructor = Versions;
  this.root = pluginsDir;
  this.info = this.list(this.root);
}

/**
 * 差分を取得する。
 * 
 *   this.info = {
 *     plugin_a : 1.0.0
 *   , plugin_b : 1.0.1
 *   }
 * 
 *    target = {
 *     plugin_a : 1.0.0
 *   , plugin_b : 1.0.0
 *   , plugin_c : 1.0.0
 *   , plugin_c_from : plugin_a@1.0.0
 *   , plugin_d : 1.0.0
 *   , plugin_d_from : plugin_b@1.0.0
 *   , plugin_g : 1.0.0
 *   }
 *   
 *   のとき
 *   
 *   { plugin_b : 1.0.0
 *   , plugin_d : 1.0.0 } を返す。 
 * 
 * @param target 差分を確認する対象。
 * @returns targetの内、キーが一致し、バージョンが一致しない要素。
 */
function Versions_diff(target) {
  var diff = {}
    , self = this.info;
  Object.keys(target, function(key) {
    var value    = verExpr(target[key])
      , find_key = findKey(key, target[key]);

    // 管理外のpluginであれば対象外。
    if (!Object.has(self, find_key)) return; 
    
    if (self[find_key] != value) {
      key = key.remove('_from');
      diff[key] = target[key];
    }
  });
  return diff;

  /**
   * バージョン情報の表現の正規化。
   */
  function verExpr(value) {
    return value.split('@').last()
  }
  /**
   * プラグインのキー情報の正規化。
   */
  function findKey(key, value) {
    return key.endsWith('_from') ? value.split('@').first() : key;
  }
}

/**
 * ディレクトリ直下のプラグインのバージョン情報を取得する。
 * 
 * @param root
 * @returns ディレクトリ直下のプラグイン群のバージョン情報
 */
function Versions_list(root) {
  var versions = {};
  fs.readdirSync(root)
    .filter(function(dirname) {
      return fs.existsSync(path.join(root, dirname, 'package.json'));
    })
    .each(function(dirname){
      var info = require(path.resolve(root, dirname, 'package.json'));
      versions[info.name] = info.version;
      if (info._from) {versions[info.name+"_from"] = info._from;}
    });
  return versions;
}

/**
 * コンストラクタのエイリアス用の関数。
 * 
 * @param pluginDir 検査対象のディレクトリ。
 * @returns {Versions}
 */
function versions(pluginDir) {
  return new Versions(pluginDir);
}

module.exports = versions;