runTest(
  デフォルトの場合
, slideFrom_leftの場合
, slideFrom_rightの場合
);

function デフォルトの場合() {
  var $menu = $('#defaultContext')
    , $open = $('#default_open')
    , $close = $('#default_close')
    , $screen = $('.nablarch_screen')
    , initpos = $menu.css('left')
    , touchSupport = ('ontouchstart' in window);

  equal($menu.length, 1 , "メニューが存在する。");
  equal($open.length, 1 , "開くボタンが存在する。");
  equal($close.length, 1 , "閉じるボタンが存在する。");
  equal($screen.length, 1 , "スクリーンが存在する。");
  equal($menu.is('.touchdevice'), touchSupport, "デバイスの結果が出力される。");

  ok(isHide($menu),  "menu  :初期表示はhide状態");
  ok(isHide($close), "close :初期表示はhide状態");
  ok(isShow($open),  "open  :初期表示はshow状態");
  ok(isHide($screen),"screen:初期表示はhide状態");
  $open.click();
  delay(function(){
    equal($menu.css('left').remove('px'), '0', "デフォルトはleftを操作する。");
    ok(isShow($menu),  "menu  :openしたらshow状態");
    ok(isShow($close), "close :openしたらshow状態");
    ok(isShow($screen),"screen:openしたらshow状態");
    ok(isHide($open),  "open  :openしたらhide状態");
    ok($('body').is('.scrollOff'), 'menuが出ればscrollOff状態になる。');
    $close.click();
    delay(function(){
      equal($menu.css('left'), initpos, "初期位置に移動。")
      ok(isHide($menu),  "menu  :closeしたらhide状態");
      ok(isHide($close), "close :closeしたらhide状態");
      ok(isHide($screen),"screen:closeしたらhide状態");
      ok(isShow($open),  "open  :closeしたらshow状態");
      ok(!$('body').is('.scrollOff'), 'menuが出ればscrollOff状態を解除する。');
      $open.click();
      delay(function(){
        ok(isShow($menu) && isShow($close) && isShow($screen) && isHide($open), "各Nodeの状態の確認");
        $menu.click();
        ok(isShow($menu) && isShow($close) && isShow($screen) && isHide($open), "メニューをクリックしても変わらない。");
        $screen.click();
        ok(isHide($menu),   "menu  :screenをclickしたらhide状態");
        ok(isHide($close),  "close :screenをclickしたらhide状態");
        ok(isHide($screen), "screen:screenをclickしたらhide状態");
        ok(isShow($open),   "open  :screenをclickしたらshow状態");
      });
    });
  });
}

function slideFrom_leftの場合() {
  var $menu = $('#fromLeftContext')
    , $open = $('#fromleft_open')
    , $close = $('#fromleft_close')
    , $screen = $('.nablarch_screen')
    , initpos = $menu.css('left');

  equal($menu.length, 1 , "メニューが存在する。");
  equal($open.length, 1 , "開くボタンが存在する。");
  equal($close.length, 1 , "閉じるボタンが存在する。");
  equal($screen.length, 1 , "スクリーンが存在する。");

  ok(isHide($menu),  "menu  :初期表示はhide状態");
  ok(isHide($close), "close :初期表示はhide状態");
  ok(isShow($open),  "open  :初期表示はshow状態");
  ok(isHide($screen),"screen:初期表示はhide状態");
  $open.click();
  delay(function(){
    equal($menu.css('left').remove('px'), '0', "leftを操作する。");
    ok(isShow($menu),  "menu  :openしたらshow状態");
    ok(isShow($close), "close :openしたらshow状態");
    ok(isShow($screen),"screen:openしたらshow状態");
    ok(isHide($open),  "open  :openしたらhide状態");
    $close.click();
    delay(function(){
      equal($menu.css('left'), initpos, "初期位置に移動。")
      ok(isHide($menu),  "menu  :closeしたらhide状態");
      ok(isHide($close), "close :closeしたらhide状態");
      ok(isHide($screen),"screen:closeしたらhide状態");
      ok(isShow($open),  "open  :closeしたらshow状態");
    });
  });
}

function slideFrom_rightの場合() {
  var $menu = $('#fromRightContext')
    , $open = $('#fromright_open')
    , $close = $('#fromright_close')
    , $screen = $('.nablarch_screen')
    , initpos = $menu.css('right');

  equal($menu.length, 1 , "メニューが存在する。");
  equal($open.length, 1 , "開くボタンが存在する。");
  equal($close.length, 1 , "閉じるボタンが存在する。");
  equal($screen.length, 1 , "スクリーンが存在する。");

  ok(isHide($menu),  "menu  :初期表示はhide状態");
  ok(isHide($close), "close :初期表示はhide状態");
  ok(isShow($open),  "open  :初期表示はshow状態");
  ok(isHide($screen),"screen:初期表示はhide状態");
  $open.click();
  delay(function(){
    equal($menu.css('right').remove('px'), '0', "leftを操作する。");
    ok(isShow($menu),  "menu  :openしたらshow状態");
    ok(isShow($close), "close :openしたらshow状態");
    ok(isShow($screen),"screen:openしたらshow状態");
    ok(isHide($open),  "open  :openしたらhide状態");
    $close.click();
    delay(function(){
      equal($menu.css('right'), initpos, "初期位置に移動。")
      ok(isHide($menu),  "menu  :closeしたらhide状態");
      ok(isHide($close), "close :closeしたらhide状態");
      ok(isHide($screen),"screen:closeしたらhide状態");
      ok(isShow($open),  "open  :closeしたらshow状態");
    });
  });
}

function delay(callback, time) {
  QUnit.stop();
  setTimeout(function() {
    callback();
    QUnit.start();
  }, time || 600);
}
/*
 * show状態かどうか。
 * 
 * !isHideを利用すると論理和が適用されるのでこの関数を適用すること。
 * 
 * @param $node 判定対象のjQueryObject
 * @returns {Boolean}
 */
function isShow($node) {
  return $node.is('.show') && $node.is(':not(.hide)') && $node.is(':not(:hidden)');
}

/*
 * hide状態かどうか。
 *
 * !isShowを利用すると論理和が適用されるのでこの関数を適用すること。
 *
 * @param $node 判定対象のjQueryObject
 * @returns {Boolean}
 */
function isHide($node) {
  return $node.is('.hide') && $node.is(':hidden') && $node.is(':not(.show)');
}

function fail(msg) {
  ok(false, msg);
}